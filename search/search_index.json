{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Doc Como estruturar um projeto do Zero Este \u00e9 um projeto exemplo dedicado a demonstrar pr\u00e1ticas de refatora\u00e7\u00e3o. Neste espa\u00e7o, voc\u00ea encontrar\u00e1 uma descri\u00e7\u00e3o aprofundada da ETL, instru\u00e7\u00f5es para instala\u00e7\u00e3o, respostas a perguntas frequentes e mais. Seja voc\u00ea um colaborador ou simplesmente algu\u00e9m com interesse no projeto, esperamos que esta documenta\u00e7\u00e3o lhe seja \u00fatil. Al\u00e9m disso, esta documenta\u00e7\u00e3o pode ser integrada ao Confluence ou a uma intranet interna, facilitando o acesso e colabora\u00e7\u00e3o de todos os membros da equipe. Introdu\u00e7\u00e3o O objetivo deste projeto \u00e9 demonstrar como t\u00e9cnicas de refatora\u00e7\u00e3o podem ser aplicadas para melhorar a qualidade do c\u00f3digo, otimizar a performance e tornar o software mais manuten\u00edvel. A refatora\u00e7\u00e3o \u00e9 essencial para manter o c\u00f3digo limpo e compreens\u00edvel, permitindo que equipes mantenham uma alta velocidade de desenvolvimento ao longo do tempo. Guia de Instala\u00e7\u00e3o Aqui, voc\u00ea encontrar\u00e1 instru\u00e7\u00f5es detalhadas sobre como instalar e configurar o projeto em seu ambiente local. Seguir as instru\u00e7\u00f5es corretamente garante que voc\u00ea tenha uma experi\u00eancia suave ao trabalhar no projeto. FAQ Esta se\u00e7\u00e3o fornece respostas para perguntas frequentes. Se voc\u00ea tiver alguma d\u00favida que n\u00e3o est\u00e1 coberta aqui, sinta-se \u00e0 vontade para entrar em contato.","title":"Home"},{"location":"#doc-como-estruturar-um-projeto-do-zero","text":"Este \u00e9 um projeto exemplo dedicado a demonstrar pr\u00e1ticas de refatora\u00e7\u00e3o. Neste espa\u00e7o, voc\u00ea encontrar\u00e1 uma descri\u00e7\u00e3o aprofundada da ETL, instru\u00e7\u00f5es para instala\u00e7\u00e3o, respostas a perguntas frequentes e mais. Seja voc\u00ea um colaborador ou simplesmente algu\u00e9m com interesse no projeto, esperamos que esta documenta\u00e7\u00e3o lhe seja \u00fatil. Al\u00e9m disso, esta documenta\u00e7\u00e3o pode ser integrada ao Confluence ou a uma intranet interna, facilitando o acesso e colabora\u00e7\u00e3o de todos os membros da equipe.","title":"Doc Como estruturar um projeto do Zero"},{"location":"#introducao","text":"O objetivo deste projeto \u00e9 demonstrar como t\u00e9cnicas de refatora\u00e7\u00e3o podem ser aplicadas para melhorar a qualidade do c\u00f3digo, otimizar a performance e tornar o software mais manuten\u00edvel. A refatora\u00e7\u00e3o \u00e9 essencial para manter o c\u00f3digo limpo e compreens\u00edvel, permitindo que equipes mantenham uma alta velocidade de desenvolvimento ao longo do tempo.","title":"Introdu\u00e7\u00e3o"},{"location":"#guia-de-instalacao","text":"Aqui, voc\u00ea encontrar\u00e1 instru\u00e7\u00f5es detalhadas sobre como instalar e configurar o projeto em seu ambiente local. Seguir as instru\u00e7\u00f5es corretamente garante que voc\u00ea tenha uma experi\u00eancia suave ao trabalhar no projeto.","title":"Guia de Instala\u00e7\u00e3o"},{"location":"#faq","text":"Esta se\u00e7\u00e3o fornece respostas para perguntas frequentes. Se voc\u00ea tiver alguma d\u00favida que n\u00e3o est\u00e1 coberta aqui, sinta-se \u00e0 vontade para entrar em contato.","title":"FAQ"},{"location":"api/","text":"API Documentation Abaixo, voc\u00ea encontrar\u00e1 detalhes sobre as fun\u00e7\u00f5es e m\u00f3dulos do nosso projeto. M\u00f3dulo Pipeline Extract fun\u00e7\u00e3o para ler os arquivos de uma pasta em path e retornar uma lista de DataFrames args: input_path (str): caminho da pasta para extra\u00e7\u00e3o return: df_list: lista de DataFrames Source code in src/pipeline/extract.py 7 8 9 10 11 12 13 14 15 16 17 18 19 20 def extract_from_excels_folder ( path : list [ str ]) -> list [ pd . DataFrame ]: \"\"\" fun\u00e7\u00e3o para ler os arquivos de uma pasta em path e retornar uma lista de DataFrames args: input_path (str): caminho da pasta para extra\u00e7\u00e3o return: df_list: lista de DataFrames \"\"\" full_path = os . path . join ( * path , \"*.xlsx\" ) path_files = glob . glob ( full_path ) dataframes = [ pd . read_excel ( file ) for file in path_files ] return dataframes Transform Fun\u00e7\u00e3o que transforma uma lista de DataFrames em um DataFrame unido. Source code in src/pipeline/transform.py 4 5 6 7 8 9 def concat_dataframes ( dataframes : list [ pd . DataFrame ]) -> pd . DataFrame : \"\"\" Fun\u00e7\u00e3o que transforma uma lista de DataFrames em um DataFrame unido. \"\"\" concated_df = pd . concat ( dataframes , ignore_index = True ) return concated_df Load Salva um DataFrame no formato Excel (xlsx) args: df: pd.DataFrame: Dataframe que ser\u00e1 salvo em Excel filename: str: nome do arquivo que ser\u00e1 gerado. path: list[str]: caminho que ser\u00e1 usado para salvar o arquivo. Source code in src/pipeline/load.py 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 def load_to_excel ( df : pd . DataFrame , filename : str , path : list [ str ]): \"\"\" Salva um DataFrame no formato Excel (xlsx) args: df: pd.DataFrame: Dataframe que ser\u00e1 salvo em Excel filename: str: nome do arquivo que ser\u00e1 gerado. path: list[str]: caminho que ser\u00e1 usado para salvar o arquivo. \"\"\" folder_path = os . path . join ( * path ) if not os . path . exists ( folder_path ): os . makedirs ( folder_path ) full_path = os . path . join ( folder_path , f \" { filename } .xlsx\" ) df . to_excel ( full_path , index = False )","title":"API"},{"location":"api/#api-documentation","text":"Abaixo, voc\u00ea encontrar\u00e1 detalhes sobre as fun\u00e7\u00f5es e m\u00f3dulos do nosso projeto.","title":"API Documentation"},{"location":"api/#modulo-pipeline","text":"","title":"M\u00f3dulo Pipeline"},{"location":"api/#extract","text":"fun\u00e7\u00e3o para ler os arquivos de uma pasta em path e retornar uma lista de DataFrames args: input_path (str): caminho da pasta para extra\u00e7\u00e3o return: df_list: lista de DataFrames Source code in src/pipeline/extract.py 7 8 9 10 11 12 13 14 15 16 17 18 19 20 def extract_from_excels_folder ( path : list [ str ]) -> list [ pd . DataFrame ]: \"\"\" fun\u00e7\u00e3o para ler os arquivos de uma pasta em path e retornar uma lista de DataFrames args: input_path (str): caminho da pasta para extra\u00e7\u00e3o return: df_list: lista de DataFrames \"\"\" full_path = os . path . join ( * path , \"*.xlsx\" ) path_files = glob . glob ( full_path ) dataframes = [ pd . read_excel ( file ) for file in path_files ] return dataframes","title":"Extract"},{"location":"api/#transform","text":"Fun\u00e7\u00e3o que transforma uma lista de DataFrames em um DataFrame unido. Source code in src/pipeline/transform.py 4 5 6 7 8 9 def concat_dataframes ( dataframes : list [ pd . DataFrame ]) -> pd . DataFrame : \"\"\" Fun\u00e7\u00e3o que transforma uma lista de DataFrames em um DataFrame unido. \"\"\" concated_df = pd . concat ( dataframes , ignore_index = True ) return concated_df","title":"Transform"},{"location":"api/#load","text":"Salva um DataFrame no formato Excel (xlsx) args: df: pd.DataFrame: Dataframe que ser\u00e1 salvo em Excel filename: str: nome do arquivo que ser\u00e1 gerado. path: list[str]: caminho que ser\u00e1 usado para salvar o arquivo. Source code in src/pipeline/load.py 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 def load_to_excel ( df : pd . DataFrame , filename : str , path : list [ str ]): \"\"\" Salva um DataFrame no formato Excel (xlsx) args: df: pd.DataFrame: Dataframe que ser\u00e1 salvo em Excel filename: str: nome do arquivo que ser\u00e1 gerado. path: list[str]: caminho que ser\u00e1 usado para salvar o arquivo. \"\"\" folder_path = os . path . join ( * path ) if not os . path . exists ( folder_path ): os . makedirs ( folder_path ) full_path = os . path . join ( folder_path , f \" { filename } .xlsx\" ) df . to_excel ( full_path , index = False )","title":"Load"}]}